plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
	id 'com.google.cloud.tools.jib' version '3.3.2'
}

group = 'com.backend'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.h2database:h2'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
	implementation 'com.amazonaws:aws-java-sdk-ses:1.12.408'
	implementation 'com.amazonaws:aws-java-sdk-sqs:1.12.472'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testRuntimeOnly 'com.h2database:h2'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
}


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}


def inputTag = project.hasProperty('inputTag') ? project.property('inputTag') : '10f48204'

jib {
	from {
		image = "openjdk:17-alpine"
	}
	to {
		image = "your-respository"
		tags = ["latest", inputTag]
		credHelper = 'ecr-login'
	}
	container {
		creationTime = "USE_CURRENT_TIMESTAMP"
		jvmFlags = ['-XX:+UseContainerSupport', '-Dserver.port=8081', '-Dfile.encoding=UTF-8']
		ports = ['8081']
	}
}